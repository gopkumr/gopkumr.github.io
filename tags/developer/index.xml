<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>developer on Beneath Abstraction</title><link>https://www.beneathabstraction.com/tags/developer/</link><description>Recent content in developer on Beneath Abstraction</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><lastBuildDate>Tue, 22 Jun 2021 10:18:48 +1100</lastBuildDate><atom:link href="https://www.beneathabstraction.com/tags/developer/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing Custom Feature flags - Your own logic to shutoff a feature - Azure App Configuration</title><link>https://www.beneathabstraction.com/post/azurecustomfeatureflags/</link><pubDate>Tue, 22 Jun 2021 10:18:48 +1100</pubDate><guid>https://www.beneathabstraction.com/post/azurecustomfeatureflags/</guid><description>This is a continuation from the previous article on feature flags implemented using Azure App configuration service to maintain the flags. Just to reiterate, feature management can be implemented using config files but this article is trying to implement feature flags connecting to Azure App configuration service.
Introduction The previous article described about implementing a boolean feature flag to turn on/off a feature. In this article I am trying to implement a custom feature flag.</description></item><item><title>Implementing Feature flags using azure</title><link>https://www.beneathabstraction.com/post/azurefeatureflags/</link><pubDate>Sun, 16 May 2021 10:00:48 +1100</pubDate><guid>https://www.beneathabstraction.com/post/azurefeatureflags/</guid><description>Feature flag is a very popular practice in modern application development, which is used to specifically hide features implemented that are not yet ready to be used by wider audience, and when ready can be enabled by a flip of a switch. The flags can also be used as a kill switch for application feature when it not working as expected.
With feature flags implemented, it would be effective to have the features enabled or disabled from a location outside of the application infrastructure or configuration, this way we can have features spanning across applications be controlled via a centralized flag.</description></item><item><title>Tired of updating namespaces? With VS2019 you won't.</title><link>https://www.beneathabstraction.com/post/namespaceupdate/</link><pubDate>Thu, 17 Oct 2019 18:50:46 +1100</pubDate><guid>https://www.beneathabstraction.com/post/namespaceupdate/</guid><description>Most of us programmers would have moved code files around to different folders at a different stages of the application development, this might be due to refactoring or redesigning or re-organizing. While moving around the code files, most .Net developers would have spent enough time changing the namespaces to match the folder structure (as better practice).
With Visual Studio 2019, this mundane task of changing the namespaces while moving folder is now automated, which means, visual studio updates the namespace to match the folder structure by itself.</description></item><item><title>Clean your code using Code cleanup in Visual Studio 2019</title><link>https://www.beneathabstraction.com/post/vs2019codecleanup/</link><pubDate>Fri, 16 Sep 2016 14:22:48 +1100</pubDate><guid>https://www.beneathabstraction.com/post/vs2019codecleanup/</guid><description>All we developers would have spent time in cleaning up the code after we are done with a long day of code and coffee! for .Net developers it is to do with removing all the using clause added automatically by visual studio/nuget that you no longer need, removing variables that was not put to use, adding read only to eligible private variables, adding or removing braces from single statement blocks etc etc.</description></item></channel></rss>