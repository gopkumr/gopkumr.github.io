<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kubernetes on Beneath Abstraction</title>
    <link>https://www.beneathabstraction.com/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on Beneath Abstraction</description>
    <image>
      <title>Beneath Abstraction</title>
      <url>https://www.beneathabstraction.com/images/logo.png</url>
      <link>https://www.beneathabstraction.com/images/logo.png</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 07 Oct 2024 21:45:08 +1000</lastBuildDate>
    <atom:link href="https://www.beneathabstraction.com/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simplified Microservice Deployment with Azure Container Apps and Dapr</title>
      <link>https://www.beneathabstraction.com/post/microservice-deployment-with-azure-container-apps/</link>
      <pubDate>Mon, 07 Oct 2024 21:45:08 +1000</pubDate>
      <guid>https://www.beneathabstraction.com/post/microservice-deployment-with-azure-container-apps/</guid>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;In this blog post we look into a scalable and flexible platform to run microservices on Azure without the complexity of managing infrastructure. &lt;strong&gt;Azure Container Apps&lt;/strong&gt; allows you to run containerized microservices and integrating &lt;strong&gt;Dapr (Distributed Application Runtime)&lt;/strong&gt; can simplify the communication between services, manage state, and handle pub/sub messaging. This blog also shows how to set up Azure Container Apps, and how to deploy Dapr-enabled microservices that communicate with each other.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Infrastructure as C#</title>
      <link>https://www.beneathabstraction.com/post/infraascsharp/</link>
      <pubDate>Sun, 26 Jul 2020 18:52:19 +1100</pubDate>
      <guid>https://www.beneathabstraction.com/post/infraascsharp/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;After attempting the .Net tutorial on deploying a simple WebAPI based microservice to Azure Kubernetes Service (AKS), wanted a better way to represent my infrastructure than the YAML.xml file. This was partly because of me being novice in YAML format and partly to have a way to abstract the infrastructure in order to make it repeatable and it should be not just confined to AKS.
The first solution to this problem was to use a framework like Terraform to define my infrastructure as code. But this will lead me learn new language and language constructs like loops, conditions etc.
The search was over pretty soon after I found a framework called Pulumi, that lets me write my infrastructure in many of the populate programming language including C#. So i decided to convert the .Net tutorial YAML into a pulumi project and see how well it runs.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
