<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure on Beneath Abstraction</title><link>https://www.beneathabstraction.com/tags/azure/</link><description>Recent content in Azure on Beneath Abstraction</description><generator>Hugo</generator><language>en-au</language><lastBuildDate>Mon, 01 Jul 2024 00:59:16 +0000</lastBuildDate><atom:link href="https://www.beneathabstraction.com/tags/azure/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuring Azure Application Gateway for API Management Traffic Routing</title><link>https://www.beneathabstraction.com/post/appgatewayurlrewrite/</link><pubDate>Sat, 02 Dec 2023 14:00:48 +1100</pubDate><guid>https://www.beneathabstraction.com/post/appgatewayurlrewrite/</guid><description>Introduction Azure Application Gateway provides a powerful solution for load balancing, SSL termination, and URL-based routing. In this blog post, we will discuss a common scenario where we need to forward traffic to two different Azure API Management instances based on the incoming URL, distinguishing between non-production and production environments.
Problem Statement Consider a scenario where you have two separate instances of Azure API Management (Sku: any non consumption tier): one for non-production/testing (nonprod) and the other for production (prod).</description></item><item><title>Exposing Azure Storage container via SFTP</title><link>https://www.beneathabstraction.com/post/azurestoragesftp/</link><pubDate>Mon, 13 Jun 2022 12:05:53 +1000</pubDate><guid>https://www.beneathabstraction.com/post/azurestoragesftp/</guid><description>Context While most of the application integration patterns are moving towards real-time, near-real-time and stream based solutions, there are still requirement to have batch file based data movement. These requirements are often for reporting or data warehousing scenario or while integrating with a legacy system. While there are many products that help setup SFTP server, Azure was missing a SaaS offering for hosted SFTP server, like Amazon&amp;rsquo;s AWS Transfer on top of S3.</description></item><item><title>Client Certificate authentication using Azure API Management</title><link>https://www.beneathabstraction.com/post/clientcertauthapim/</link><pubDate>Sun, 27 Feb 2022 20:03:08 +1100</pubDate><guid>https://www.beneathabstraction.com/post/clientcertauthapim/</guid><description>Introduction APIs have become so popular that almost all websites and applications rely on APIs to get data from server. Often user impersonation is used to authenticate as well as authorize access to the resource exposed by an API, but there are also use cases where application itself needs data from an API for functioning. Currently the most used authentication mechanism is OAuth, where identity management is performed by a third provider and both the client and resource server trusts this identity provider.</description></item><item><title>Cloning a Azure Function App</title><link>https://www.beneathabstraction.com/post/functionappclone/</link><pubDate>Thu, 10 Feb 2022 14:22:48 +1100</pubDate><guid>https://www.beneathabstraction.com/post/functionappclone/</guid><description>Recently I had a requirement to make a copy of a Function App from the production version to support a POC implementation of an solution upgrade.
One option was to deploy the Release branch which had the version same as in PROD (we already made updates to that function app post release, so DEV was already a lot of commits ahead). The challenge with this approach was, since we did not had a hotfix release, there were no Pipelines setup for Release branch.</description></item><item><title>Policy Execution in Azure APIM.</title><link>https://www.beneathabstraction.com/post/apimpolicyexecution/</link><pubDate>Wed, 27 Oct 2021 18:50:46 +1100</pubDate><guid>https://www.beneathabstraction.com/post/apimpolicyexecution/</guid><description>What are APIM Policies? APIM policies are statements executed by Azure APIM to modify the behavior of API request, response and exception flows. The logic/conditions written as part of the policies are executed at various stages of API execution like, request received (inbound), before request sent to backend service/API (backend), before sending response to requester (outbound) and in case of any exceptions during the request processing (on-error). Policies are defined as an XML format with different tag to define the execution stage and the actual policy.</description></item><item><title>Move azure resources between resource groups</title><link>https://www.beneathabstraction.com/post/moveresources/</link><pubDate>Tue, 12 Oct 2021 17:20:59 +1100</pubDate><guid>https://www.beneathabstraction.com/post/moveresources/</guid><description>Problem While working with Azure cloud platform, often there will be instances where resources needs moving across resource groups for maintenance reasons or because of re-organising of products. There might even cases where the resource may need to be moved across subscriptions.
Solution In Azure resources can be moved across resource groups from the portal UI or Azure CLI or powershell or from the rest APIs. Moving the resource using the portal UI is as easy as going through a wizard like steps and clicking finish at the end of it.</description></item><item><title>Deploying 'JUST' the modified ARM templates</title><link>https://www.beneathabstraction.com/post/selectedarmdeployment/</link><pubDate>Sun, 05 Sep 2021 10:00:46 +1000</pubDate><guid>https://www.beneathabstraction.com/post/selectedarmdeployment/</guid><description>Problem The project has a bunch of ARM templates as part of IAC scripts and more often only couple, if not few templates get modified. But when deploying using Azure pipeline all the templates gets deployed. Even though ARM template deployment support incremental mode, if a templates is deployed with exact same properties, the resource gets recreated. The project does not want to recreate all the templates when only a few are changed.</description></item><item><title>Identity in Microsoft Azure - Modern Authentication</title><link>https://www.beneathabstraction.com/post/securingusingazure-part2/</link><pubDate>Sun, 01 Aug 2021 18:06:02 +1000</pubDate><guid>https://www.beneathabstraction.com/post/securingusingazure-part2/</guid><description>Introduction Continuing from the previous post, the new generation of authentication mechanism was created to satisfy the new generation of application, starting from apps that run just in the browser to apps that run on micro-controllers. This new generation of authentication mechanism called as the modern authentication protocols are built on top of the OAuth protocol and taking inspiration from SAML. In the below article the term IDP refers to the Identity provider, the external service that is responsible for authenticating a user and issuing authorization tokens.</description></item><item><title>Identity in Microsoft Azure - A bit of history</title><link>https://www.beneathabstraction.com/post/securingusingazure-part1/</link><pubDate>Sat, 24 Jul 2021 19:16:16 +1000</pubDate><guid>https://www.beneathabstraction.com/post/securingusingazure-part1/</guid><description>Introduction Authentication has been an important component in the world of IT from the time companies required their employees to prove their identity to use the company&amp;rsquo;s computing resources whether it was to execute its business processes or accessing email or file. During the earlier days employees used to login to their computers using a username and password, which was stored in a central server like an active directory (in case of Microsoft tech stack).</description></item><item><title>Cloud Resume Challenge - Azure Serverless</title><link>https://www.beneathabstraction.com/post/azureserverlessresume/</link><pubDate>Mon, 28 Jun 2021 10:18:48 +1100</pubDate><guid>https://www.beneathabstraction.com/post/azureserverlessresume/</guid><description>I recently came across the site https://cloudresumechallenge.dev/ and decided to give it a try using Azure services. To start simple I decided to ignore the DB, CDN part etc and just have the the UI and the middler layer of the app. Below is the high level architecture.
The front end of the app will be hosted a static web site in Azure Blob storage. Backend will be an Azure function that will feed the resume data to the frontend over HTTP, the azure function will be a HTTP triggered function.</description></item><item><title>Implementing Custom Feature flags - Your own logic to shutoff a feature - Azure App Configuration</title><link>https://www.beneathabstraction.com/post/azurecustomfeatureflags/</link><pubDate>Tue, 22 Jun 2021 10:18:48 +1100</pubDate><guid>https://www.beneathabstraction.com/post/azurecustomfeatureflags/</guid><description>This is a continuation from the previous article on feature flags implemented using Azure App configuration service to maintain the flags. Just to reiterate, feature management can be implemented using config files but this article is trying to implement feature flags connecting to Azure App configuration service.
Introduction The previous article described about implementing a boolean feature flag to turn on/off a feature. In this article I am trying to implement a custom feature flag.</description></item><item><title>Implementing Feature flags using azure</title><link>https://www.beneathabstraction.com/post/azurefeatureflags/</link><pubDate>Sun, 16 May 2021 10:00:48 +1100</pubDate><guid>https://www.beneathabstraction.com/post/azurefeatureflags/</guid><description>Feature flag is a very popular practice in modern application development, which is used to specifically hide features implemented that are not yet ready to be used by wider audience, and when ready can be enabled by a flip of a switch. The flags can also be used as a kill switch for application feature when it not working as expected.
With feature flags implemented, it would be effective to have the features enabled or disabled from a location outside of the application infrastructure or configuration, this way we can have features spanning across applications be controlled via a centralized flag.</description></item><item><title>Azure for integration and process automation</title><link>https://www.beneathabstraction.com/post/azureintegration/</link><pubDate>Sun, 21 Jun 2020 18:52:19 +1100</pubDate><guid>https://www.beneathabstraction.com/post/azureintegration/</guid><description>Problem Businesses run on multiple applications and services, how well the business runs is often impacted on how efficiently data is distributed to the correct task. Automating this flow of data is a way to streamline the business. The problem here is to choose the right technology for this data integration and process automation.
Objective This article is describing the azure technologies that are available during time of writing to solve the business need.</description></item></channel></rss>