<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>API Management on Beneath Abstraction</title>
    <link>https://www.beneathabstraction.com/tags/api-management/</link>
    <description>Recent content in API Management on Beneath Abstraction</description>
    <image>
      <title>Beneath Abstraction</title>
      <url>https://www.beneathabstraction.com/images/logo.png</url>
      <link>https://www.beneathabstraction.com/images/logo.png</link>
    </image>
    <generator>Hugo -- 0.136.5</generator>
    <language>en</language>
    <lastBuildDate>Sat, 02 Dec 2023 14:00:48 +1100</lastBuildDate>
    <atom:link href="https://www.beneathabstraction.com/tags/api-management/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configuring Azure Application Gateway for API Management Traffic Routing</title>
      <link>https://www.beneathabstraction.com/post/appgatewayurlrewrite/</link>
      <pubDate>Sat, 02 Dec 2023 14:00:48 +1100</pubDate>
      <guid>https://www.beneathabstraction.com/post/appgatewayurlrewrite/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Azure Application Gateway provides a powerful solution for load balancing, SSL termination, and URL-based routing. In this blog post, we will discuss a common scenario
where we need to forward traffic to two different Azure API Management instances based on the incoming URL, distinguishing between non-production and production environments.&lt;/p&gt;
&lt;h2 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h2&gt;
&lt;p&gt;Consider a scenario where you have two separate instances of Azure API Management (Sku: any non consumption tier): one for non-production/testing (nonprod) and the other for production (prod).
The requirement is to route incoming traffic through an Azure Application Gateway, forwarding requests to the appropriate API Management instance based on the path specified in the URL.
Specifically, requests with the path /nonprod/* should be directed to the non-production API Management instance, while requests without this path should be forwarded to the production instance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Client Certificate authentication using Azure API Management</title>
      <link>https://www.beneathabstraction.com/post/clientcertauthapim/</link>
      <pubDate>Sun, 27 Feb 2022 20:03:08 +1100</pubDate>
      <guid>https://www.beneathabstraction.com/post/clientcertauthapim/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;APIs have become so popular that almost all websites and applications rely on APIs to get data from server. Often user impersonation is used to authenticate as well as authorize access to the resource exposed by an API, but there are also use cases where application itself needs data from an API for functioning. Currently the most used authentication mechanism is OAuth, where identity management is performed by a third provider and both the client and resource server trusts this identity provider. While this works well, there is also another way to authenticate when the interaction is purely machine to machine, and works based on  SSL certificates and is called Client Certificate Authentication.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Policy Execution in Azure APIM.</title>
      <link>https://www.beneathabstraction.com/post/apimpolicyexecution/</link>
      <pubDate>Wed, 27 Oct 2021 18:50:46 +1100</pubDate>
      <guid>https://www.beneathabstraction.com/post/apimpolicyexecution/</guid>
      <description>&lt;h2 id=&#34;what-are-apim-policies&#34;&gt;What are APIM Policies?&lt;/h2&gt;
&lt;p&gt;APIM policies are statements executed by Azure APIM to modify the behavior of API request, response and exception flows. The logic/conditions written as part of the policies are executed at various stages of API execution like,  &lt;em&gt;request received (inbound)&lt;/em&gt;, &lt;em&gt;before request sent to backend service/API (backend)&lt;/em&gt;, &lt;em&gt;before sending  response to requester (outbound)&lt;/em&gt; and &lt;em&gt;in case of any exceptions during the request processing (on-error)&lt;/em&gt;. Policies are defined as an XML format with different tag to define the execution stage and the actual policy.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
