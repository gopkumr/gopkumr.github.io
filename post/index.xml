<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Beneath Abstraction</title><link>https://gopkumr.github.io/post/</link><description>Recent content in Posts on Beneath Abstraction</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><lastBuildDate>Sun, 26 Jul 2020 18:52:19 +1100</lastBuildDate><atom:link href="https://gopkumr.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Infrastructure as C#</title><link>https://gopkumr.github.io/post/infraascsharp/</link><pubDate>Sun, 26 Jul 2020 18:52:19 +1100</pubDate><guid>https://gopkumr.github.io/post/infraascsharp/</guid><description>Introduction After attempting the .Net tutorial on deploying a simple WebAPI based microservice to Azure Kubernetes Service (AKS), wanted a better way to represent my infrastructure than the YAML.xml file. This was partly because of me being novice in YAML format and partly to have a way to abstract the infrastructure in order to make it repeatable and it should be not just confined to AKS. The first solution to this problem was to use a framework like Terraform to define my infrastructure as code.</description></item><item><title>Azure for integration and process automation</title><link>https://gopkumr.github.io/post/azureintegration/</link><pubDate>Sun, 21 Jun 2020 18:52:19 +1100</pubDate><guid>https://gopkumr.github.io/post/azureintegration/</guid><description>Problem Businesses run on multiple applications and services, how well the business runs is often impacted on how efficiently data is distributed to the correct task. Automating this flow of data is a way to streamline the business. The problem here is to choose the right technology for this data integration and process automation.
Objective This article is describing the azure technologies that are available during time of writing to solve the business need.</description></item><item><title>Steps for Deploying a Blazor as Static Site with Docker and Nginx</title><link>https://gopkumr.github.io/post/blazorhostdocker/</link><pubDate>Thu, 11 Jun 2020 18:52:19 +1100</pubDate><guid>https://gopkumr.github.io/post/blazorhostdocker/</guid><description>Step 1 Publish the Blazor WebAssembly project Publish the project from Visual Studio,this ensures that the projects is linked which removes all the unwanted dependencies from the output, reducing the size of the assemblies created.
Step 2 Create a dockerfile The docker file is very straightforward, pull the nginx image and copy the published Blazor WebAssembly file from the WWWRoot folder to the html folder in nginx
FROM nginx:alpine EXPOSE 80 COPY bin/Release/netcoreapp3.</description></item><item><title>Hosting Blazor WebAssembly on ASP.Net Core WebAPI</title><link>https://gopkumr.github.io/post/blazorhostwebapi/</link><pubDate>Tue, 09 Jun 2020 18:52:19 +1100</pubDate><guid>https://gopkumr.github.io/post/blazorhostwebapi/</guid><description>Background My WebAssembly project has now been configured to be a PWA (refer the previous article in series). It time to introduce hosting. Since the WebAssembly project handles the client side, I want it to be unchanged but be hosted it in a project that can be used as backend for the UI, hence chose WebAPI.
The Changes Create a new solution and add the already created Blazor WebAssembly project Add a new ASPNet core web project and choose WebAPI template and call it the .</description></item><item><title>How can I turn my Blazor WebAssembly to PWA?</title><link>https://gopkumr.github.io/post/blazorwasntopwa/</link><pubDate>Thu, 04 Jun 2020 18:52:19 +1100</pubDate><guid>https://gopkumr.github.io/post/blazorwasntopwa/</guid><description>Lets get started with an existing Blazor WebAssembly project I already have a Blazor WebAssembly project created implementing Angular Tour of heros application. You can find the project in my GitHub repository here Repo: https://github.com/gopkumr/BlazorTourOfHeroes.git Branch: Release
Next step is making this into PWA As with any web application, adding PWA capabilities to Blazor follows the web standard process of adding a manifest json file and the service workers js file.</description></item><item><title>An attempt to convert Blazor WebAssembly Project to Blazor Server App</title><link>https://gopkumr.github.io/post/blazorwebasmtoserv/</link><pubDate>Sat, 25 Apr 2020 18:52:19 +1100</pubDate><guid>https://gopkumr.github.io/post/blazorwebasmtoserv/</guid><description>Blazor Web-Assembly Project This starts from my Blazor Web-Assembly project that I create as a replica of the Angular TourOfHeros tutorial. The source code of project is in GitHub
This is an attempt to convert the existing project to a Blazor server app with few changes to the wiring up and hosting configuration. Since this article is written with a pre-release version of Blazor Web-Assembly, there could be changes to the steps after the actual release expected in May 2020.</description></item><item><title>a sneak peek into Blazor WebAssembly</title><link>https://gopkumr.github.io/post/introblazor/</link><pubDate>Sun, 12 Jan 2020 18:52:19 +1100</pubDate><guid>https://gopkumr.github.io/post/introblazor/</guid><description>an attempt to create tour of heroes' using Blazor preface WebAssembly is an exciting piece of software, along with HTML, CSS and JavaScript WebAssembly (or WASM) is the fourth language that modern browsers can run natively, WASM is run in the browser in the same security sandbox as the JavaScript frameworks run. WASM also lets you invoke JavaScript and vice versa, making it coexist with JavaScript, More on WebAssembly here: https://webassembly.</description></item><item><title>Tired of updating namespaces? With VS2019 you won't.</title><link>https://gopkumr.github.io/post/namespaceupdate/</link><pubDate>Thu, 17 Oct 2019 18:50:46 +1100</pubDate><guid>https://gopkumr.github.io/post/namespaceupdate/</guid><description>Most of us programmers would have moved code files around to different folders at a different stages of the application development, this might be due to refactoring or redesigning or re-organizing. While moving around the code files, most .Net developers would have spent enough time changing the namespaces to match the folder structure (as better practice).
With Visual Studio 2019, this mundane task of changing the namespaces while moving folder is now automated, which means, visual studio updates the namespace to match the folder structure by itself.</description></item><item><title>A brave move by Brave</title><link>https://gopkumr.github.io/post/brave/</link><pubDate>Tue, 20 Aug 2019 18:39:11 +1100</pubDate><guid>https://gopkumr.github.io/post/brave/</guid><description>Current online ads landscape
Advertisers and publishers are always in search of targeting the right user group and the actual presenting of ads to the user. Users are the most undervalued actor of the use case. The ads intrude into the viewing area, uses up bandwidth, make the overall experience poor. In most cases, the users enjoy the service for free by viewing the ads e.g. Youtube. Brave browser has taken this use case and improvised to make it a win-win situation for all.</description></item><item><title>ASP.Net MVC 5 and Security</title><link>https://gopkumr.github.io/post/mvc5security/</link><pubDate>Sat, 14 Oct 2017 10:51:44 +1100</pubDate><guid>https://gopkumr.github.io/post/mvc5security/</guid><description>Security? Security is one of the most important cross-cutting concern for any web application. All applications (except for static web sites) require to identify a user and restrict the users from viewing or performing actions on pages.
Authentication Authentication is the method by which an application identifies a user. By identifying a user, the application can decide whether the user is a valid user to access the application.
Authorization Authorization is the way the application decides if the identified user can view a particular page or perform a particular action.</description></item><item><title>Clean your code using Code cleanup in Visual Studio 2019</title><link>https://gopkumr.github.io/post/vs2019codecleanup/</link><pubDate>Fri, 16 Sep 2016 14:22:48 +1100</pubDate><guid>https://gopkumr.github.io/post/vs2019codecleanup/</guid><description>All we developers would have spent time in cleaning up the code after we are done with a long day of code and coffee! for .Net developers it is to do with removing all the using clause added automatically by visual studio/nuget that you no longer need, removing variables that was not put to use, adding read only to eligible private variables, adding or removing braces from single statement blocks etc etc.</description></item></channel></rss>